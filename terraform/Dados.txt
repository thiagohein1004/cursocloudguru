User:
tgoterraform
AKIASUUSB2H6OCZIE57J
jjcOg6JByPdwgOA3WQSSggjO1QvGt+t0DKQpFFMG
us-west-2

Terraform
- terraform version
- terraform init = start
- terraform plan = execution plan
- terraform apply = apply changes
- terraform destroy = destroy infrastructure
- terraform plan -out (plan_name) = output plan
- terraform plan -destroy = output destroy plan
- terraform apply (plan_name) = apply specific plan
- terraform apply -target=(resource_name) = only apply changes to a targeted resource_name
- terraform apply -var my_variable=(variable) = pass a variable via the command line
- terraform providers = get provider info used in configuration
etc...
______________________________

File Extension:

.tf = where code in Terraform language is stored
.tf.json = variant json of the language

Modules:
collection of .tf and/or .tf.json files kept together in a directory

______________________________

Variables

Here is a list of the optional Arguments and Type Constraints that can be used:

Arguments:

 default - Default value which then makes the variable optional.
 type - Specifies what value types are accepted for the variable.
 description - Specifies the input variable’s documentation.
 validation - Defines validation rules, usually in addition to type constraints.
 sensitive - This limits the Terraform UI output when the variable is used in the configuration.
Type Constraints

string
number
bool
Type Constructors that can be used with Type Constraints

list(<TYPE>)
set(<TYPE>)
map(<TYPE>)
object({<ATTR_NAME> = <TYPE>, … })
tuple([<TYPE>, …])

________________________________ 

Terraform Locals

Terraform Locals 
Podemos definir o locals com seguinte bloco:
locals{  
    
    local_name = "local_value"
}
Agora vamos ver um exemplo de uso do Terraform Locals. Abaixo temos um exemplo que estamos criando uma vpc, subnet e instanciando ec2 na aws. Aqui pode ser visto que a expressão maria-quiteria nas tags de cada resource pode ser substituida pelo terraform locals tornando o codigo mais limpo.
 resource "aws_vpc" "vpc-web-maria-quiteria" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "vpc-maria-quiteria" 
  }
}

resource "aws_subnet" "sub-web-maria-quiteria" {
  vpc_id     = aws_vpc.vpc-web-maria-quiteria.id
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "sub-maria-quiteria"
  }
}

resource "aws_instance" "ec2-maria-quiteria" {
  ami           = "ami-09d3b3274b6c5d4aa"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.sub-web-maria-quiteria.id


  tags = {
    Name = "ec2-maria-quiteria"
    env  = "prod-maria-quiteria"
  }
} 
Codigo com Terraform Local
Em vez de ser usado valor estático como acima, podemos ver que podemos substituir uma parte do texto nas tags de cada resource com a variavel setup_name nomeada no bloco locals. 
 locals {
  setup_name = "maria-quiteria"
}



resource "aws_vpc" "vpc-web-maria-quiteria" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "vpc-${local.setup_name}"
  }
}


resource "aws_subnet" "sub-web-maria-quiteria" {
  vpc_id     = aws_vpc.vpc-web-maria-quiteria.id
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "sub-${local.setup_name}"
  }
}


resource "aws_instance" "ec2-maria-quiteria" {
  ami           = "ami-09d3b3274b6c5d4aa"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.sub-web-maria-quiteria.id


  tags = {
    Name = "ec2-${local.setup_name}"
    env  = "prod-${local.setup_name}"
  }
} 

______________________________

LAB:

Installing Terraform and Working With Terraform Providers
Introduction
In this hands-on lab, we'll go through installing and configuring Terraform version 13 on a Linux OS. We will also explore how to select and use a Terraform provider from among the many providers available publicly.

Solution
Log in to the lab server using the credentials provided:

ssh cloud_user@<PublicIP>
In a web browser, log in to the AWS Management Console using the credentials provided.

Download And Manually Install the Terraform Binary
Download the appropriate Terraform binary package for the provided lab server VM (Linux 64-bit) using the wget command:

wget -c https://releases.hashicorp.com/terraform/0.13.4/terraform_0.13.4_linux_amd64.zip
Unzip the downloaded file:

unzip terraform_0.13.4_linux_amd64.zip
Place the Terraform binary in the PATH of the VM operating system so the binary is accessible system-wide to all users:

sudo mv terraform /usr/sbin/
Note: If prompted, enter the username and password provided for the lab server.

Check the Terraform version information:

terraform version
Since the Terraform version is returned, you have validated that the Terraform binary is installed and working properly.

Clone Over Code for Terraform Providers
Create a providers directory:

mkdir providers
Move into the providers directory:

cd providers/
Create the file main.tf:

vim main.tf
Paste in the following code from the provided GitHub repo:

provider "aws" {
  alias  = "us-east-1"
  region = "us-east-1"
}

provider "aws" {
  alias  = "us-west-2"
  region = "us-west-2"
}


resource "aws_sns_topic" "topic-us-east" {
  provider = aws.us-east-1
  name     = "topic-us-east"
}

resource "aws_sns_topic" "topic-us-west" {
  provider = aws.us-west-2
  name     = "topic-us-west"
}
To save and exit the file, press Escape and enter :wq.

Deploy the Code with Terraform Apply
Enable verbose output logging for Terraform commands using TF_LOG=TRACE:

export TF_LOG=TRACE
Note: You can turn off verbose logging at any time using the export TF_LOG= command.

Initialize the working directory where the code is located:

terraform init
Review the actions performed when you deploy the Terraform code:

terraform plan
Note: Two resources will be created, consistent with the providers that were configured in the provided code snippet.

Deploy the code:

terraform apply
When prompted, type yes and press Enter.

Verify that two resources were created with their corresponding Amazon Resource Name (ARN) IDs in the region in which they were spun up.

Optionally, verify that the resources were created in their respective regions within the AWS Management Console:

Navigate to the AWS Management Console in your browser.
Verify that you are logged in to the us-east-1 region upon signing in.
Click Services.
Type SNS in the search bar and select Simple Notification Service from the contextual menu.
In the menu on the left, click Topics.
Verify that the topic-us-east resource appears in the list.
At the top-right, click N. Virginia and select us-west-2.
Verify that the topic-us-west resource appears in the list.
Tear down the infrastructure you just created before moving on:

terraform destroy --auto-approve
Conclusion
Congratulations — you've completed this hands-on lab!

______________________________



